---
import "@fontsource/fira-sans";
import "@fontsource/fira-code";
import { ViewTransitions } from "astro:transitions";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { AUTHOR, SITE } from "@/consts";
import { getFavicon, getOgImage } from "@/images";

interface Props {
  tab: string;
  title: string;
  description: string;
  keywords?: string[];
  image?: ImageMetadata;
  imageDescription?: string;
  date?: Date;
  class?: string;
}

const {
  tab,
  title,
  description,
  keywords,
  image,
  imageDescription,
  date,
  class: className,
} = Astro.props;

if (image !== undefined && imageDescription === undefined) {
  throw new Error("Image description is required when image is provided");
}

const ogImage = image !== undefined ? await getOgImage(image) : undefined;
const appleTouchIcon = await getFavicon(180);
const favicon = await getFavicon(180);
---

<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="icon" href="/favicon.ico" sizes="32x32" />
    <link
      rel="icon"
      href={favicon.src}
      type={`image/${favicon.options.format}`}
    />
    <link rel="apple-touch-icon" href={appleTouchIcon.src} />
    <link rel="manifest" href="/manifest.json" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content={AUTHOR.name} />
    <meta name="description" content={description} />
    <meta name="keywords" content={(keywords ?? []).join(", ")} />
    <meta property="og:title" content={title} />
    <meta property="og:site_name" content={SITE.domain} />
    <meta property="og:description" content={description} />
    {
      ogImage !== undefined && (
        <>
          <meta property="og:image" content={ogImage.src} />
          <meta
            property="og:image:width"
            content={ogImage.attributes.width.toString()}
          />
          <meta
            property="og:image:height"
            content={ogImage.attributes.height.toString()}
          />
          <meta
            property="og:image:type"
            content={`image/${ogImage.options.format}`}
          />
          <meta property="og:image:alt" content={imageDescription} />
          <meta name="twitter:card" content="summary_large_image" />
        </>
      )
    }
    {
      date !== undefined && (
        <>
          <meta property="og:type" content="article" />
          <meta property="article:author" content={AUTHOR.name} />
          <meta
            property="article:published_time"
            content={date.toISOString()}
          />
          {keywords?.map((keyword) => (
            <meta property="article:tag" content={keyword} />
          ))}
        </>
      )
    }
    <ViewTransitions />
  </head>

  <body
    class="relative mx-auto flex min-h-screen max-w-screen-md flex-col items-center gap-0 bg-stone-300 text-black dark:bg-stone-700 dark:text-white"
  >
    <header class="w-full text-left">
      <Header tab={tab} />
    </header>
    <main
      class:list={[
        "z-10 w-full flex-1 bg-stone-200 pb-2 text-left shadow-lg shadow-stone-900/20 dark:bg-stone-800 sm:rounded-b-3xl sm:rounded-t-xl sm:p-4",
        className,
      ]}
    >
      <slot />
    </main>
    <footer
      class="flex w-full flex-row justify-center gap-0 text-left"
      transition:persist
    >
      <Footer />
    </footer>
  </body>
</html>
