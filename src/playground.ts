import {
  ImageMagick,
  type IMagickImage,
  initialize,
  MagickFormat,
} from "https://deno.land/x/imagemagick_deno/mod.ts";

const SVG = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256">
  <path
    d="M115.754,0.44c3.523,-0.292 7.085,-0.44 10.682,-0.44c33.822,0.841 66.655,14.164 90.804,38.007c27.685,27.333 41.028,67.732 36.18,106.151c-0.086,0.69 -0.178,1.381 -0.274,2.075c-8.862,62.022 -62.254,109.767 -126.71,109.767c-49.11,0 -91.799,-27.718 -113.26,-68.35c-0.301,-0.88 -0.62,-1.71 -0.957,-2.482c-16.725,-38.198 -14.603,-85.869 12.91,-118.652c6.862,-8.175 15.043,-14.838 23.976,-20.612c7.516,-4.86 16.278,-8.743 24.975,-10.895c22.53,-5.578 46.804,-2.172 65.846,11.611c18.286,13.236 30.874,34.439 30.516,57.247c-0.12,7.666 -1.294,15.403 -4.535,22.419c-2.448,5.297 -5.564,10.154 -9.641,14.355c-15.973,16.465 -40.207,21.143 -60.646,10.68c-13.869,-7.102 -24.209,-22.058 -20.287,-38.156c0.744,-3.05 1.626,-5.059 3.292,-7.498c0.274,-0.402 1.177,-1.875 2.084,-1.721c0.157,0.027 -0.012,0.324 -0.067,0.473c-0.323,0.872 -0.815,1.682 -1.064,2.577c-1.154,4.146 -1.251,5.949 -1.135,10.282c0.188,6.96 3.581,13.385 8.931,17.829c15.84,13.155 40.008,5.327 49.408,-11.515c2.895,-5.186 4.404,-10.973 4.006,-16.926c-0.86,-12.88 -11.032,-24.287 -23.504,-27.328c-10.661,-2.599 -21.441,-0.847 -31.219,3.978c-4.733,2.334 -8.876,5.294 -12.626,9.008c-20.422,20.22 -16.538,56.19 0.106,77.329c19.459,24.716 56.715,34.402 86.2,24.436c42.79,-14.465 69.03,-64.202 56.192,-107.525c-7.32,-24.7 -25.878,-46.41 -48.211,-58.993c-15.147,-8.532 -31.308,-13.562 -48.597,-15.256c-5.747,-0.564 -12.852,-0.408 -18.613,-0.475c-1.887,-0.023 -5.132,0.203 -5.328,-2.519c-0.196,-2.722 3.651,-5.029 5.821,-5.738c4.785,-1.563 9.739,-2.597 14.745,-3.143Z"
  />
</svg>
`;

async function test(_: Request): Promise<Response> {
  await initialize();
  const response = await ImageMagick.read(
    new TextEncoder().encode(SVG),
    async (img: IMagickImage) => {
      img.resize(400, 400);
      return await img.write(
        MagickFormat.Jpeg,
        async (data: Uint8Array) => {
          await Promise.resolve();
          return data;
        },
      );
    },
  );
  return new Response(response, { headers: { "Content-Type": "image/jpeg" } });
}

Deno.serve(test);
