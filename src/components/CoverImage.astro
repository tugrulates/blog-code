---
import { getImage } from "astro:assets";
import { DIMENSIONS } from "@/consts";
import type { CoverMeta } from "@/components/Cover.astro";

interface Props {
  cover: CoverMeta;
  class?: string;
}
const { cover: image, class: className } = Astro.props;

const breakpoints = [
  {
    min_width: DIMENSIONS.mobile_cover_size,
    width: DIMENSIONS.desktop_cover_width,
    height: DIMENSIONS.desktop_cover_height,
    src: image.data.wide,
  },
  {
    min_width: 600,
    width: 600,
    height: 600,
    src: image.data.square,
  },
  {
    min_width: 425,
    width: 425,
    height: 425,
    src: image.data.square,
  },
  {
    min_width: 0,
    width: 320,
    height: 320,
    src: image.data.square,
  },
];
const images = await Promise.all(
  breakpoints.map(async (breakpoint) => {
    const images = await Promise.all(
      [1, 2, 3, 4].map(
        async (scale) =>
          await getImage({
            format: "webp",
            src: breakpoint.src,
            width: breakpoint.width * scale,
            height: breakpoint.height * scale,
          }),
      ),
    );
    return { breakpoint, images };
  }),
);
---

<picture class="object-contain">
  {
    images.map(({ breakpoint, images }) => (
      <source
        media={`(min-width: ${breakpoint.min_width}px)`}
        srcset={`${images[0].src} 1x, ${images[1].src} 2x, ${images[2].src} 3x, ${images[3].src} 4x`}
      />
    ))
  }
  <img
    class:list={[
      "h-full w-full max-sm:aspect-square sm:aspect-video",
      className,
    ]}
    src={image.data.wide.src}
    alt={image.data.description}
    width={DIMENSIONS.desktop_cover_width}
    height={DIMENSIONS.desktop_cover_height}
  />
</picture>
