---
import { getImage } from "astro:assets";
import type { CoverMeta } from "~/components/Cover.astro";
import { DIMENSIONS } from "~/config.ts";

interface Props {
  cover: CoverMeta;
  class?: string;
}
const { cover: image, class: className } = Astro.props;

const breakpoints = [
  {
    min_width: DIMENSIONS.cover.square.width,
    ...DIMENSIONS.cover.wide,
    src: image.data.wide,
  },
  { min_width: 600, width: 600, height: 600, src: image.data.square },
  { min_width: 425, width: 425, height: 425, src: image.data.square },
  { min_width: 0, width: 320, height: 320, src: image.data.square },
];
const images = await Promise.all(
  breakpoints.map(async (breakpoint) => {
    const images = await Promise.all(
      [1, 2, 3, 4].map(async (scale) =>
        getImage({
          format: "webp",
          src: breakpoint.src,
          width: breakpoint.width * scale,
          height: breakpoint.height * scale,
        })
      )
    );
    return { breakpoint, images };
  })
);
---

<picture class="object-contain">
  {
    images.map(({ breakpoint, images }) => (
      <source
        media={`(min-width: ${breakpoint.min_width}px)`}
        srcset={`${images[0]?.src} 1x, ${images[1]?.src} 2x, ${images[2]?.src} 3x, ${images[3]?.src} 4x`}
      />
    ))
  }
  <img
    alt={image.data.description}
    class:list={[
      "h-full w-full max-sm:aspect-square sm:aspect-video",
      className,
    ]}
    height={DIMENSIONS.cover.wide.height}
    src={image.data.wide.src}
    width={DIMENSIONS.cover.wide.width}
  />
</picture>
